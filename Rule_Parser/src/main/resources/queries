esper


insert into CombinedEvent
select A.customerId as custId, A.timestamp - B.timestamp as latency
  from EventA.win:time(30 min) A, EventB.win:time(30 min) B
 where A.txnId = B.txnId


select cardId, expressway, direction, segment, count(*)
from CarLocEvent.std:groupwin(carId).win:length(4)
group by carId, expressway, direction, segment


select avg(price) from StockTick.win:time(30 sec) where symbol='IBM'


select symbol, price, sum(volume) from StockTick(symbol='IBM').win:time(60 sec)

select volume * price as volPrice from StockTick

select tick.symbol from StockTick.win:time(10) as tick, News.win:time(10) as news
where news.symbol = tick.symbol


select distinct sensorId from TemperatureSensorEvent output every 10 seconds


select cardId, expressway, direction, segment, count(*)
from CarLocEvent.std:groupwin(carId).win:length(4)     // join wind
group by carId, expressway, direction, segment


select sum(price) from OrderEvent.win:time(30 sec).std:unique(productName) retain-union


select 'IBM stats' as title, avg(price) as avgPrice, sum(price) as sumPrice
from StockTickEvent(symbol='IBM').win:length(10)
where symbol='IBM'


select symbol, tickDataFeed, median(volume)
from StockTickEvent.win:time(30 sec)
group by symbol, tickDataFeed


select tickDataFeed, stddev(price)
from StockTickEvent(symbol='IBM').win:length(10)
where volume > 1000
group by tickDataFeed
having stddev(price) > 0.8

// siddhi

from samplefromstream[condition]#window.time(para1,para2) select atr1 as attr1o , atr2 as attr2o, avg(temp) as avgTemp group by grp1 having having1 insert into insert-stream

from TempStream[temp > 30.0]#window.time(1 min) as T
  join RegulatorStream[isOn == false]#window.length(1) as R
  on T.roomNo == R.roomNo
select T.roomNo, R.deviceID, 'start' as action
insert into RegulatorActionStream;

select tick.symbol from StockTick.win:time(10) as tick, News.win:time(10) as news
where news.symbol = tick.symbol